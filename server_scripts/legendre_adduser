#!/usr/bin/env python

import os, sys, subprocess, pwd, argparse
opj, sep = os.path.join, os.sep

parser = argparse.ArgumentParser(description='Add a new lmfdb user to legendre')
parser.add_argument('name', help='the name of the new user (for email)')
parser.add_argument('username', help='the username for the new user')
parser.add_argument('github_name', help='the github username for the new user')
parser.add_argument('login_keys', help='the string to add to authorized_keys')
args = parser.parse_args()
name, username, gitname, login_keys = args.name, args.username, args.github_name, args.login_keys

userhome = opj(sep, "scratch", "home", username)
lmfdbhome = opj(userhome, "lmfdb")
sshhome = opj(userhome, ".ssh")
loginfile = opj(sshhome, "authorized_keys")

def my_chown(filename):
    # os.chown doesn't work recursively.
    subprocess.check_call(["chown", "-R", "%s:%s"%(username,username), filename])

# Make user
try:
    subprocess.check_call(["adduser", "--home", userhome, "--shell", opj(sep, "bin", "bash"), "--disabled-password", "--gecos", '""', username])
except subprocess.CalledProcessError:
    print "You must run as root"
    sys.exit(1)
subprocess.check_call(["adduser", username, "lmfdb_devs"])
uid = pwd.getpwnam(username).pw_uid
subprocess.check_call(["ln", "-s", userhome, opj(sep, "home", username)])
print "User %s created" % username
os.chdir(userhome)
# Clone and setup lmfdb
subprocess.check_call(["git", "clone", "-q", "https://github.com/LMFDB/lmfdb.git", lmfdbhome])
os.chdir(lmfdbhome)
subprocess.check_call(["git", "remote", "rename", "origin", "upstream"])
subprocess.check_call(["git", "remote", "set-url", "upstream", "git@github.com:LMFDB/lmfdb.git"])
subprocess.check_call(["git", "remote", "add", "origin", "git@github.com:%s/lmfdb.git"%gitname])
port = 40000 + uid
subprocess.check_call(["python", opj("lmfdb", "utils", "config.py"), "-p", str(port), "--postgresql-host", "grace.mit.edu"])
my_chown(lmfdbhome)
print "LMFDB set up"
# Deal with ssh keys
os.mkdir(sshhome, 0700)
with open(loginfile, "w") as F:
    F.write(login_keys)
os.chmod(loginfile, 0644)
subprocess.check_call(["ssh-keygen", "-b", "2048", "-t", "rsa", "-f", opj(sshhome, "id_rsa"), "-q", "-N", "", "-C", "%s@legendre" % username])
my_chown(sshhome)
print "Setup complete!\n"

print r"""Dear %s,

We have created an account for you on legendre.mit.edu.
Your username is %s; use the ssh keys that you provided us to log in, as this is a passwordless account.

Having an account on legendre.mit.edu allows you to connect to the database running on the same server, and we recommend you that you take advantage of this by running LMFDB on legendre.
For your convenience, we have set up a copy of LMFDB on your home directory (~/lmfdb) to take advantage of this, more precisely, to use the port %d and read from the database running locally, this is set in ~/lmfdb/config.ini.

You can then interact with this version of LMFDB running on legendre through your browser at http://localhost:37777 by setting an SSH tunnel from 37777 (on your machine) to %d on legendre.mit.edu.
This can be done automatically by adding the following lines to ~/.ssh/config on your machine:

Host legendre
Hostname legendre.mit.edu
LocalForward localhost:37777 localhost:%d
TCPKeepAlive yes
ServerAliveInterval 50
Compression Yes
user %s

after you have added these lines to ~/.ssh/config, you can then connect to legendre.mit.edu by simply typing:

ssh legendre

and it will also create the desired SSH tunnel automatically.
Alternatively, instead of adding these lines to ~/.ssh/config you can create the tunnel and connect to legendre.mit.edu with the following command:

ssh -o TCPKeepAlive=yes -o ServerAliveInterval=50 -C -L 37777:localhost:%s %s@legendre.mit.edu


Once you are connected to legendre.mit.edu, you can run on legendre the usual comman: sage -python start-lmfdb.py --debug

Lastly, the LMFDB repository in your home directory is set to use your GitHub username %s.
For your convenience, we have generated an ssh key for you, and to be able to interact with GitHub from legendre you should add it to GitHub:
""" % (name, username, port, port, port, username, port, username, gitname)

with open(opj(sshhome, "id_rsa.pub")) as F:
    print F.read()

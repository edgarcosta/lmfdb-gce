#!/bin/sh


#  Copyright (C)  2016-2017  Edgar Costa
#  See the file LICENSE for license details.


PREFIX="" #"/usr/local"
FLINT_DIR="" # "/usr/local"
GMP_DIR="" #"/usr/local"
PRIMESIEVE_DIR="" #"/usr/local"
ARB_DIR="" #"/usr/local"
MPFR_DIR="" #"/usr/local"
SMALLJAC_DIR="" #"/usr/local"
FF_POLY_DIR="" #"/usr/local"

if [  -z ${CC+word} ]; then
    CC="gcc"
fi;
if [  -z ${CXX+word} ]; then
    CXX="g++"
fi;


LIBS="m"
ASSERT=1
GDB=1
FLAGS=""


# disable unnecessary libs and options
unset PREFIX
#unset FLINT_DIR
#unset GMP_DIR
#unset PRIMESIEVE_DIR
#unset ARB_DIR
#unset MPFR_DIR
#unset SMALLJAC_DIR
#unset FF_POLY_DIR
#CC=""
#CXX=""


usage()
{
    echo "Usage: ./configure <options> <args>"
    echo "   where <options> may be"
    echo "     -h or --help display usage information"
    echo "     --enable-assert or --disable-assert"
    echo "     --enable-gdb or --disable-gdb"
    echo "   where <args> may be:"

    if [ ! -z ${PREFIX+word} ]; then
        echo "     --prefix=<path>      Specify path to installation location (default: $PREFIX"
    fi

    if [ ! -z ${FLINT_DIR+word} ]; then
      echo "     --with-flint=<path>   Specify location of FLINT (default: $FLINT_DIR)"
    fi

    if [ ! -z ${GMP_DIR+word} ]; then
        echo "     --with-gmp=<path>    Specify location of GMP (default: $GMP_DIR)"
    fi

    if [ ! -z ${ARB_DIR+word} ]; then
        echo "     --with-arb=<path>   Specify location of ARB (default: $ARB_DIR)"
    fi

    if [ ! -z ${PRIMESIEVE_DIR+word} ]; then
        echo "     --with-primesieve=<path>   Specify location of PRIMESIEVE (default: $PRIMESIEVE_DIR)"
    fi

    if [ ! -z ${MPFR_DIR+word} ]; then
        echo "     --with-mpfr=<path>    Specify location of MPFR (default: $MPFR_DIR)"
    fi;

    if [ ! -z ${FF_POLY_DIR+word} ]; then
        echo "     --with-ff_poly=<path>    Specify location of FF_POLY (optional, only required for examples) (default: $FF_POLY_DIR)"
    fi;

    if [ ! -z ${SMALLJAC_DIR+word} ]; then
        echo "     --with-smalljac=<path>    Specify location of SMALLJAC (optional, only required for examples) (default: $SMALLJAC_DIR)"
    fi;

    if [ -n "$CC" ]; then
        echo "     CC=<name>            Use the C compiler with the given name (default: $CC)"
        echo "     CFLAGS=<flags>       Pass the extra given flags to the compiler"
    fi

    if [ -n "$CXX" ]; then
        echo "     CXX=<name>           Use the C++ compiler with the given name (default: $CXX)"
        echo "     CXXFLAGS=<flags>     Pass the extra given flags to the C++ compiler"

    fi;

    }


absolute_path(){
   dirlist="$1"
   retval=""
   for dir in $dirlist; do
      case $dir in
        /*) dir=$dir;;
        *) dir=$PWD/$dir;;
      esac
      retval=$retval" "$dir
   done
   echo $retval
}


while [ "$1" != "" ]; do
    PARAM=`echo $1 | sed 's/=.*//'`
    VALUE=`echo $1 | sed 's/[^=]*//; s/=//'`
    case "$PARAM" in
        -h|--help)
            usage
            exit 0
            ;;
        --with-flint)
            if [ ! -z ${FLINT_DIR+word} ]; then
                FLINT_DIR=$(absolute_path "$VALUE")
            fi
            ;;
        --with-gmp)
            if [ ! -z ${GMP_DIR+word} ]; then
                GMP_DIR=$(absolute_path "$VALUE")
            fi
            ;;
        --with-arb)
            if [ ! -z ${ARB_DIR+word} ]; then
                ARB_DIR=$(absolute_path "$VALUE")
            fi
            ;;
        --with-primesieve)
            if [ ! -z ${PRIMESIEVE_DIR+word} ]; then
                PRIMESIEVE_DIR=$(absolute_path "$VALUE")
            fi
            ;;
        --with-mpfr)
            if [ ! -z ${MPFR_DIR+word} ]; then
                MPFR_DIR=$(absolute_path "$VALUE")
            fi
            ;;
        --with-ff_poly)
            if [ ! -z ${FF_POLY_DIR+word} ]; then
                FF_POLY_DIR=$(absolute_path "$VALUE")
            fi
            ;;
        --with-smalljac)
            if [ ! -z ${SMALLJAC_DIR+word} ]; then
                SMALLJAC_DIR=$(absolute_path "$VALUE")
            fi
            ;;
        --prefix)
            if [ ! -z ${PREFIX + word} ]; then
                PREFIX=$VALUE
            fi
            ;;
        --enable-assert)
            ASSERT=1
            ;;
        --disable-assert)
            ASSERT=0
            ;;
        --enable-gdb)
            GDB=1
            ;;
        --disable-gdb)
            GDB=0
            ;;
        CC)
            CC="$VALUE"
            ;;
        CXX)
            CXX="$VALUE"
            ;;
        CFLAGS)
            CFLAGS="$VALUE"
            ;;
        CXXFLAGS)
            CXXFLAGS="$VALUE"
            ;;
        *)
            usage
            exit 1
            ;;
    esac
    shift
done

if [ -n "${FLINT_DIR}" ]; then
    if [ -d "${FLINT_DIR}/lib" ]; then
       FLINT_LIB_DIR="${FLINT_DIR}/lib"
       FLINT_INC_DIR="${FLINT_DIR}/include"
    elif [ -d "${FLINT_DIR}/lib64" ]; then
       FLINT_LIB_DIR="${FLINT_DIR}/lib64"
       FLINT_INC_DIR="${FLINT_DIR}/include"
    elif [ -d "${FLINT_DIR}/.libs" ]; then
       FLINT_LIB_DIR="${FLINT_DIR}/.libs"
       FLINT_INC_DIR="${FLINT_DIR}"
    else
       echo "Invalid FLINT directory"
       exit 1
    fi
    LIB_DIRS="${LIB_DIRS} ${FLINT_LIB_DIR}"
    INC_DIRS="${INC_DIRS} ${FLINT_INC_DIR}"
fi;
if [ ! -z ${FLINT_DIR+word} ]; then
    LIBS="${LIBS} flint"
fi;


if [ -n "${GMP_DIR}" ]; then
    if [ -d "${GMP_DIR}/lib" ]; then
       GMP_LIB_DIR="${GMP_DIR}/lib"
       GMP_INC_DIR="${GMP_DIR}/include"
    elif [ -d "${GMP_DIR}/lib64" ]; then
       GMP_LIB_DIR="${GMP_DIR}/lib64"
       GMP_INC_DIR="${GMP_DIR}/include"
    elif [ -d "${GMP_DIR}/.libs" ]; then
       GMP_LIB_DIR="${GMP_DIR}/.libs"
       GMP_INC_DIR="${GMP_DIR}"
    else
       echo "Invalid GMP directory"
       exit 1
    fi
    LIB_DIRS="${LIB_DIRS} ${GMP_LIB_DIR}"
    INC_DIRS="${INC_DIRS} ${GMP_INC_DIR}"
fi;
if [ ! -z ${GMP_DIR+word} ]; then
    LIBS="${LIBS} gmp gmpxx"
fi;


if [ -n "${ARB_DIR}" ]; then
    if [ -d "${ARB_DIR}/lib" ]; then
       ARB_LIB_DIR="${ARB_DIR}/lib"
       ARB_INC_DIR="${ARB_DIR}/include"
    elif [ -d "${ARB_DIR}/lib64" ]; then
       ARB_LIB_DIR="${ARB_DIR}/lib64"
       ARB_INC_DIR="${ARB_DIR}/include"
    elif [ -d "${ARB_DIR}/.libs" ]; then
       ARB_LIB_DIR="${ARB_DIR}/.libs"
       ARB_INC_DIR="${ARB_DIR}"
    elif [ -d "${ARB_DIR}/src/.libs" ]; then
       ARB_LIB_DIR="${ARB_DIR}/src/.libs"
       ARB_INC_DIR="${ARB_DIR}/src"
    else
       echo "Invalid ARB directory"
       exit 1
    fi
    LIB_DIRS="${LIB_DIRS} ${ARB_LIB_DIR}"
    INC_DIRS="${INC_DIRS} ${ARB_INC_DIR}"
fi;
if [ ! -z ${ARB_DIR+word} ]; then
    LIBS="${LIBS} arb"
fi;


if [ -n "${PRIMESIEVE_DIR}" ]; then
    if [ -d "${PRIMESIEVE_DIR}/lib" ]; then
       PRIMESIEVE_LIB_DIR="${PRIMESIEVE_DIR}/lib"
       PRIMESIEVE_INC_DIR="${PRIMESIEVE_DIR}/include"
    elif [ -d "${PRIMESIEVE_DIR}/lib64" ]; then
       PRIMESIEVE_LIB_DIR="${PRIMESIEVE_DIR}/lib64"
       PRIMESIEVE_INC_DIR="${PRIMESIEVE_DIR}/include"
    elif [ -d "${PRIMESIEVE_DIR}/.libs" ]; then
       PRIMESIEVE_LIB_DIR="${PRIMESIEVE_DIR}/.libs"
       PRIMESIEVE_INC_DIR="${PRIMESIEVE_DIR}/include"
    elif [ -d "${PRIMESIEVE_DIR}/src/.libs" ]; then
       PRIMESIEVE_LIB_DIR="${PRIMESIEVE_DIR}/src/.libs"
       PRIMESIEVE_INC_DIR="${PRIMESIEVE_DIR}/src"
    else
       echo "Invalid PRIMESIEVE directory"
       exit 1
    fi
    LIB_DIRS="${LIB_DIRS} ${PRIMESIEVE_LIB_DIR}"
    INC_DIRS="${INC_DIRS} ${PRIMESIEVE_INC_DIR}"
fi;
if [ ! -z ${PRIMESIEVE_DIR+word} ]; then
    LIBS="${LIBS} primesieve"
fi;

if [ -n "${MPFR_DIR}" ]; then
    if [ -d "${MPFR_DIR}/lib" ]; then
       MPFR_LIB_DIR="${MPFR_DIR}/lib"
       MPFR_INC_DIR="${MPFR_DIR}/include"
    elif [ -d "${MPFR_DIR}/lib64" ]; then
       MPFR_LIB_DIR="${MPFR_DIR}/lib64"
       MPFR_INC_DIR="${MPFR_DIR}/include"
    elif [ -d "${MPFR_DIR}/.libs" ]; then
       MPFR_LIB_DIR="${MPFR_DIR}/.libs"
       MPFR_INC_DIR="${MPFR_DIR}"
    elif [ -d "${MPFR_DIR}/src/.libs" ]; then
       MPFR_LIB_DIR="${MPFR_DIR}/src/.libs"
       MPFR_INC_DIR="${MPFR_DIR}/src"
    else
       echo "Invalid MPFR directory"
       exit 1
    fi
    LIB_DIRS="${LIB_DIRS} ${MPFR_LIB_DIR}"
    INC_DIRS="${INC_DIRS} ${MPFR_INC_DIR}"
fi;
if [ ! -z ${MPFR_DIR+word} ]; then
    LIBS="${LIBS} mpfr"
fi;


OPTIONAL_LIB_DIRS=""
OPTIONAL_INC_DIRS=""
OPTIONAL_LIBS=""

if [ -n "${FF_POLY_DIR}" ]; then
    if [ -d "${FF_POLY_DIR}/lib" ]; then
       FF_POLY_LIB_DIR="${FF_POLY_DIR}/lib"
       FF_POLY_INC_DIR="${FF_POLY_DIR}/include"
    elif [ -d "${FF_POLY_DIR}/lib64" ]; then
       FF_POLY_LIB_DIR="${FF_POLY_DIR}/lib64"
       FF_POLY_INC_DIR="${FF_POLY_DIR}/include"
    elif [ -d "${FF_POLY_DIR}/.libs" ]; then
       FF_POLY_LIB_DIR="${FF_POLY_DIR}/.libs"
       FF_POLY_INC_DIR="${FF_POLY_DIR}"
    elif [ -d "${FF_POLY_DIR}/src/.libs" ]; then
       FF_POLY_LIB_DIR="${FF_POLY_DIR}/src/.libs"
       FF_POLY_INC_DIR="${FF_POLY_DIR}/src"
    else
       echo "Invalid FF_POLY directory"
       exit 1
    fi
    OPTIONAL_LIB_DIRS="${OPTIONAL_LIB_DIRS} ${FF_POLY_LIB_DIR}"
    OPTIONAL_INC_DIRS="${OPTIONAL_INC_DIRS} ${FF_POLY_INC_DIR}"
fi;

if [ ! -z ${FF_POLY_DIR+word} ]; then
    OPTIONAL_LIBS="${OPTIONAL_LIBS} ff_poly"
fi;
if [ -n "${SMALLJAC_DIR}" ]; then
    if [ -d "${SMALLJAC_DIR}/lib" ]; then
       SMALLJAC_LIB_DIR="${SMALLJAC_DIR}/lib"
       SMALLJAC_INC_DIR="${SMALLJAC_DIR}/include"
    elif [ -d "${SMALLJAC_DIR}/lib64" ]; then
       SMALLJAC_LIB_DIR="${SMALLJAC_DIR}/lib64"
       SMALLJAC_INC_DIR="${SMALLJAC_DIR}/include"
    elif [ -d "${SMALLJAC_DIR}/.libs" ]; then
       SMALLJAC_LIB_DIR="${SMALLJAC_DIR}/.libs"
       SMALLJAC_INC_DIR="${SMALLJAC_DIR}"
    elif [ -d "${SMALLJAC_DIR}/src/.libs" ]; then
       SMALLJAC_LIB_DIR="${SMALLJAC_DIR}/src/.libs"
       SMALLJAC_INC_DIR="${SMALLJAC_DIR}/src"
    else
       echo "Invalid SMALLJAC directory"
       exit 1
    fi
    OPTIONAL_LIB_DIRS="${OPTIONAL_LIB_DIRS} ${SMALLJAC_LIB_DIR}"
    OPTIONAL_INC_DIRS="${OPTIONAL_INC_DIRS} ${SMALLJAC_INC_DIR}"
fi;
if [ ! -z ${SMALLJAC_DIR+word} ]; then
    OPTIONAL_LIBS="${OPTIONAL_LIBS} smalljac"
fi;


OPTIONAL_LLIBS=""
for LIB_DIR in ${OPTIONAL_LIB_DIRS}; do
   OPTIONAL_LLIBS="${OPTIONAL_LLIBS} -L${LIB_DIR}"
done
OPTIONAL_lLIBS=""
for LIB in ${OPTIONAL_LIBS}; do
   OPTIONAL_lLIBS="${OPTIONAL_lLIBS} -l${LIB}"
done
echo "int main(){}" | gcc -o /dev/null -x c - $OPTIONAL_LLIBS $OPTIONAL_lLIBS
if [ $? = 0 ]; then
  echo "smalljac linking enabled"
  LIBS="$LIBS $OPTIONAL_LIBS"
  LIB_DIRS="$LIB_DIRS $OPTIONAL_LIB_DIRS"
  INC_DIRS="$INC_DIRS $OPTIONAL_INC_DIRS"
else
  echo "smalljac linking disabled"
  FLAGS="$FLAGS -DNOSMALLJAC"
fi


if [ '$(${CC} --version  2>&1 | grep -q -c "Apple clang")' ] || [ '$(${CXX} --version  2>&1 | grep -q -c "Apple clang")' ]; then
    INC_DIRS="${INC_DIRS} /usr/local/include"
fi

# include paths

INCS="-I'\$(CURDIR)/include'"
for INC_DIR in ${INC_DIRS}; do
   INCS="${INCS} -isystem${INC_DIR}"
done

# library paths

LLIBS="-L'\$(CURDIR)'"
for LIB_DIR in ${LIB_DIRS}; do
   LLIBS="${LLIBS} -L${LIB_DIR}"
done

lLIBS="";
# library params
for LIB in ${LIBS}; do
   lLIBS="-l${LIB} ${lLIBS}"
done
LIBS="$LLIBS $lLIBS"



KERNEL=`uname`
ARCH=`uname -m`
OS=`uname -s`

if [ $OS = "Linux" ]; then
    LIBS="${LIBS} -lrt"
fi

#defaults for CFLAGS
FLAGS="$FLAGS -pedantic -Wall -Wextra -O2 -funroll-loops -fPIC"
if [ "$GDB" = "1" ]; then
    FLAGS="${FLAGS} -g";
fi

if [ "$ASSERT" = "0" ]; then
    FLAGS="${FLAGS} -DNDEBUG";
fi

if [ -z "$CFLAGS" ]; then
    CFLAGS="${FLAGS} -std=gnu11"
fi
if [ -z "$CXXFLAGS" ]; then
    CXXFLAGS="${FLAGS} -std=c++1z"
fi




JOBS=`python -c 'import multiprocessing as mp; print(mp.cpu_count() + 1)'`


echo "# This file is generated by ./configure -- do not edit!" > Makefile
echo "" >> Makefile
echo "SHELL=/bin/sh" >> Makefile
echo "" >> Makefile
echo "" >> Makefile
echo "INCS=$INCS" >> Makefile
echo "LIBS=$LIBS" >> Makefile
echo "" >> Makefile
echo "CC=$CC" >> Makefile
echo "CXX=$CXX" >> Makefile
echo "" >> Makefile
echo "CFLAGS=$CFLAGS" >> Makefile
echo "CXXFLAGS=$CXXFLAGS" >> Makefile
echo "" >> Makefile
echo "" >> Makefile
echo "JOBS=$JOBS" >> Makefile
echo "" >> Makefile
echo "" >> Makefile

cat Makefile.in >> Makefile

